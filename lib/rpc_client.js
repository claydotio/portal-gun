// Generated by CoffeeScript 2.5.1
(function() {
  /*
   * Child {RPCRequest} -> Parent
   *   Parent {RPCRequestAcknowledgement} -> Child
   *   Parent {RPCResponse} -> Child
   *
   * Child {RPCRequest:{params:[RPCCallback]}} -> Parent
   *   Parent {RPCRequestAcknowledgement} -> Child
   *   Parent {RPCResponse} -> Child
   *   Parent {RPCCallbackResponse} -> Child
   *   Parent {RPCCallbackResponse} -> Child
   *
   * Parent {RPCError} -> Child
   *
   *
   * _portal is added to denote a portal-gun message
   * RPCRequestAcknowledgement is to ensure the responder recieved the request
   * RPCCallbackResponse is added to support callbacks for methods
   *
   * params, if containing a callback function, will have that method replaced
   * with RPCCallback which should be used to emit callback responses
   */
  var DEFAULT_REQUEST_TIMEOUT_MS, ERROR_CODES, ERROR_MESSAGES, RPCClient, deferredFactory, uuid;

  uuid = require('uuid');

  ERROR_CODES = {
    METHOD_NOT_FOUND: -32601,
    INVALID_ORIGIN: 100,
    DEFAULT: -1
  };

  ERROR_MESSAGES = {};

  ERROR_MESSAGES[ERROR_CODES.METHOD_NOT_FOUND] = 'Method not found';

  ERROR_MESSAGES[ERROR_CODES.INVALID_ORIGIN] = 'Invalid origin';

  ERROR_MESSAGES[ERROR_CODES.DEFAULT] = 'Error';

  DEFAULT_REQUEST_TIMEOUT_MS = 3000;

  deferredFactory = function() {
    var promise, reject, resolve;
    resolve = null;
    reject = null;
    promise = new Promise(function(_resolve, _reject) {
      resolve = _resolve;
      return reject = _reject;
    });
    promise.resolve = resolve;
    promise.reject = reject;
    return promise;
  };

  module.exports = RPCClient = (function() {
    class RPCClient {
      constructor({
          postMessage,
          timeout: timeout1
        } = {}) {
        /*
        @param {String} method
        @param {Array<*>} [params]
        @returns {Promise}
        */
        this.call = this.call.bind(this);
        /*
        @param {RPCResponse|RPCRequestAcknowledgement|RPCCallbackResponse} response
        */
        this.resolve = this.resolve.bind(this);
        /*
        @param {RPCResponse} rPCResponse
        */
        this.resolveRPCResponse = this.resolveRPCResponse.bind(this);
        /*
        @param {RPCRequestAcknowledgement} rPCRequestAcknowledgement
        */
        this.resolveRPCRequestAcknowledgement = this.resolveRPCRequestAcknowledgement.bind(this);
        /*
        @param {RPCCallbackResponse} rPCCallbackResponse
        */
        this.resolveRPCCallbackResponse = this.resolveRPCCallbackResponse.bind(this);
        this.postMessage = postMessage;
        this.timeout = timeout1;
        if (this.timeout == null) {
          this.timeout = DEFAULT_REQUEST_TIMEOUT_MS;
        }
        this.pendingRequests = {};
        this.callbackFunctions = {};
      }

      /*
      @typedef {Object} RPCRequest
      @property {Boolean} _portal - Must be true
      @property {String} id
      @property {String} method
      @property {Array<*>} params

      @param {Object} props
      @param {String} props.method
      @param {Array<*>} [props.params] - Functions are not allowed
      @returns RPCRequest
      */
      static createRPCRequest({method, params}) {
        var i, len, param;
        if (params == null) {
          throw new Error('Must provide params');
        }
        for (i = 0, len = params.length; i < len; i++) {
          param = params[i];
          if (typeof param === 'function') {
            throw new Error('Functions are not allowed. Use RPCCallback instead.');
          }
        }
        return {
          _portal: true,
          id: uuid.v4(),
          method,
          params
        };
      }

      /*
      @typedef {Object} RPCCallback
      @property {Boolean} _portal - Must be true
      @property {String} callbackId
      @property {Boolean} _portalGunCallback - Must be true

      @returns RPCCallback
      */
      static createRPCCallback() {
        return {
          _portal: true,
          _portalGunCallback: true,
          callbackId: uuid.v4()
        };
      }

      /*
      @typedef {Object} RPCCallbackResponse
      @property {Boolean} _portal - Must be true
      @property {String} callbackId
      @property {Array<*>} params

      @param {Object} props
      @param {Array<*>} props.params
      @param {String} props.callbackId
      @returns RPCCallbackResponse
      */
      static createRPCCallbackResponse({params, callbackId}) {
        return {
          _portal: true,
          callbackId: callbackId,
          params
        };
      }

      /*
      @typedef {Object} RPCRequestAcknowledgement
      @property {Boolean} _portal - Must be true
      @property {String} id
      @property {Boolean} acknowledge - must be true

      @param {Object} props
      @param {String} props.responseId
      @returns RPCRequestAcknowledgement
      */
      static createRPCRequestAcknowledgement({requestId}) {
        return {
          _portal: true,
          id: requestId,
          acknowledge: true
        };
      }

      /*
      @typedef {Object} RPCResponse
      @property {Boolean} _portal - Must be true
      @property {String} id
      @property {*} result
      @property {RPCError} error

      @param {Object} props
      @param {String} props.requestId
      @param {*} [props.result]
      @param {RPCError|Null} [props.error]
      @returns RPCResponse
      */
      static createRPCResponse({requestId, result, rPCError}) {
        if (result == null) {
          result = null;
        }
        if (rPCError == null) {
          rPCError = null;
        }
        return {
          _portal: true,
          id: requestId,
          result,
          error: rPCError
        };
      }

      /*
      @typedef {Object} RPCError
      @property {Boolean} _portal - Must be true
      @property {Integer} code
      @property {String} message
      @property {Object} data - optional

      @param {Object} props
      @param {Errpr} [props.error]
      @returns RPCError
      */
      static createRPCError({code, data}) {
        var message;
        if (data == null) {
          data = null;
        }
        message = ERROR_MESSAGES[code];
        return {
          _portal: true,
          code,
          message,
          data
        };
      }

      static isRPCEntity(entity) {
        return entity != null ? entity._portal : void 0;
      }

      static isRPCRequest(request) {
        return ((request != null ? request.id : void 0) != null) && (request.method != null);
      }

      static isRPCCallback(callback) {
        return callback != null ? callback._portalGunCallback : void 0;
      }

      static isRPCResponse(response) {
        return (response != null ? response.id : void 0) && (response.result !== void 0 || response.error !== void 0);
      }

      static isRPCCallbackResponse(response) {
        return ((response != null ? response.callbackId : void 0) != null) && (response.params != null);
      }

      static isRPCRequestAcknowledgement(ack) {
        return (ack != null ? ack.acknowledge : void 0) === true;
      }

      call(method, reqParams, {timeout} = {}) {
        var callback, deferred, err, i, len, param, params, request;
        reqParams || (reqParams = []);
        if (timeout == null) {
          timeout = this.timeout;
        }
        deferred = deferredFactory();
        params = [];
// replace callback params
        for (i = 0, len = reqParams.length; i < len; i++) {
          param = reqParams[i];
          if (typeof param === 'function') {
            callback = RPCClient.createRPCCallback(param);
            this.callbackFunctions[callback.callbackId] = param;
            params.push(callback);
          } else {
            params.push(param);
          }
        }
        request = RPCClient.createRPCRequest({method, params});
        this.pendingRequests[request.id] = {
          reject: deferred.reject,
          resolve: deferred.resolve,
          isAcknowledged: false
        };
        try {
          this.postMessage(JSON.stringify(request), '*');
        } catch (error1) {
          err = error1;
          deferred.reject(err);
          return deferred;
        }
        setTimeout(() => {
          if (!this.pendingRequests[request.id].isAcknowledged) {
            return deferred.reject(new Error('Message Timeout'));
          }
        }, timeout);
        return deferred;
      }

      resolve(response) {
        switch (false) {
          case !RPCClient.isRPCRequestAcknowledgement(response):
            return this.resolveRPCRequestAcknowledgement(response);
          case !RPCClient.isRPCResponse(response):
            return this.resolveRPCResponse(response);
          case !RPCClient.isRPCCallbackResponse(response):
            return this.resolveRPCCallbackResponse(response);
          default:
            throw new Error('Unknown response type');
        }
      }

      resolveRPCResponse(rPCResponse) {
        var error, request, result;
        request = this.pendingRequests[rPCResponse.id];
        if (request == null) {
          throw new Error('Request not found');
        }
        request.isAcknowledged = true;
        ({result, error} = rPCResponse);
        if (error != null) {
          request.reject(error.data || new Error(error.message));
        } else if (result != null) {
          request.resolve(result);
        } else {
          request.resolve(null);
        }
        return null;
      }

      resolveRPCRequestAcknowledgement(rPCRequestAcknowledgement) {
        var request;
        request = this.pendingRequests[rPCRequestAcknowledgement.id];
        if (request == null) {
          throw new Error('Request not found');
        }
        request.isAcknowledged = true;
        return null;
      }

      resolveRPCCallbackResponse(rPCCallbackResponse) {
        var callbackFn;
        callbackFn = this.callbackFunctions[rPCCallbackResponse.callbackId];
        if (callbackFn == null) {
          throw new Error('Callback not found');
        }
        callbackFn.apply(null, rPCCallbackResponse.params);
        return null;
      }

    };

    RPCClient.ERROR_CODES = ERROR_CODES;

    RPCClient.ERROR_MESSAGES = ERROR_MESSAGES;

    return RPCClient;

  }).call(this);

}).call(this);
